class Solution {
    public double[] getCollisionTimes(int[][] cars) {
        
        int n = cars.length;
        
        double res[] = new double[n];
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0; i < n; i++)
        {
            res[i] = -1;
        }
        
        
        for(int i = n - 1; i >= 0; i--)
        {
            int myPos = cars[i][0];
            int mySpeed = cars[i][1];
            
            while(!st.isEmpty())
            {
                int topPos = cars[st.peek()][0];
                int topSpeed = cars[st.peek()][1];
                
                
                 // If my speed is less than or equal to top's speed, I am never going to catch it. So pop
                if(mySpeed <= topSpeed)
                {
                    st.pop();
                    continue;
                }
                
                double collisionTime = (double)(topPos - myPos) / (mySpeed - topSpeed);
                
                if(collisionTime < res[st.peek()] || res[st.peek()] == -1)
                {
                    res[i] = collisionTime;
                    break;
                }
                
                // This top car is going to get merged into it's next car. So it is not going to exist for us
                
                st.pop();
            }
            
            st.push(i);
        }
        
        return res;
    }
}

//https://leetcode.com/problems/car-fleet-ii/discuss/1288777/Very-easy-to-understand-Java-solution-with-lots-of-comments
